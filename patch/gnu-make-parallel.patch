commit d6d1ab75860f4dac457b98a024b24615f0e996c9
Author: Sam Thursfield <sam@afuera.me.uk>
Date:   Wed Dec 4 23:39:45 2019 +0100

    Enable parallel building for extensions
    
    When building extensions, I noticed a lot of warnings from GNU Make
    saying this:
    
        make[1]: warning: jobserver unavailable: using -j1. Add '+' to parent make rule.
    
    This was causing extensions to be built on a single CPU, instead of
    altogether. By adding the '+' prefix we can make things work in
    parallel, as documented here:
    
        https://flameeyes.blog/2008/11/16/for-a-parallel-world-case-study-n-4-jobserver-unavailable/
    
    Note that this may break the build for anyone who is using non-GNU
    `make`.

diff --git a/externals/Makefile b/externals/Makefile
index 64361086..2b6d036f 100644
--- a/externals/Makefile
+++ b/externals/Makefile
@@ -312,89 +312,89 @@ aka.wiiremote_clean:
 #------------------------------------------------------------------------------#
 # APPLE
 apple:
-	make -C $(externals_src)/apple PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/apple PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 apple_install:
-	make -C $(externals_src)/apple DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/apple DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 apple_clean:
-	make -C $(externals_src)/apple clean
+	+$(MAKE) -C $(externals_src)/apple clean
 
 #------------------------------------------------------------------------------#
 # AUTOTUNE
 autotune:
-	make -C $(externals_src)/autotune PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/autotune PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 autotune_install:
-	make -C $(externals_src)/autotune DESTDIR="$(DESTDIR)" \
+	+$(MAKE) -C $(externals_src)/autotune DESTDIR="$(DESTDIR)" \
 		objectsdir="$(objectsdir)" install
 	install -p $(externals_src)/autotune/autotune_scale_warp.png \
 		$(DESTDIR)/$(objectsdir)/images
 
 autotune_clean:
-	make -C $(externals_src)/autotune clean
+	+$(MAKE) -C $(externals_src)/autotune clean
 
 #------------------------------------------------------------------------------#
 # ARRAYSIZE
 arraysize:
-	make -C $(externals_src)/arraysize PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/arraysize PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 arraysize_install:
-	make -C $(externals_src)/arraysize DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/arraysize DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 arraysize_clean:
-	make -C $(externals_src)/arraysize clean
+	+$(MAKE) -C $(externals_src)/arraysize clean
 
 
 #------------------------------------------------------------------------------#
 # BASSEMU
 bassemu:
-	make -C $(externals_src)/bassemu~ PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/bassemu~ PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 bassemu_install:
-	make -C $(externals_src)/bassemu~ DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/bassemu~ DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 bassemu_clean:
-	make -C $(externals_src)/bassemu~ clean
+	+$(MAKE) -C $(externals_src)/bassemu~ clean
 
 
 #------------------------------------------------------------------------------#
 # BOIDS
 boids:
-	make -C $(externals_src)/boids PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/boids PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 boids_install:
-	make -C $(externals_src)/boids \
+	+$(MAKE) -C $(externals_src)/boids \
 		DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 boids_clean:
-	make -C $(externals_src)/boids clean
+	+$(MAKE) -C $(externals_src)/boids clean
 
 
 #------------------------------------------------------------------------------#
 # BSAYLOR
 bsaylor:
-	make -C $(externals_src)/bsaylor PD_PATH=$(pd_src) CFLAGS="$(CFLAGS) -fno-strict-aliasing"
+	+$(MAKE) -C $(externals_src)/bsaylor PD_PATH=$(pd_src) CFLAGS="$(CFLAGS) -fno-strict-aliasing"
 
 bsaylor_install:
-	make -C $(externals_src)/bsaylor \
+	+$(MAKE) -C $(externals_src)/bsaylor \
 		DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 bsaylor_clean:
-	make -C $(externals_src)/bsaylor clean
+	+$(MAKE) -C $(externals_src)/bsaylor clean
 
 
 #------------------------------------------------------------------------------#
 # COMPORT
 comport:
-	make -C $(externals_src)/iem/comport/comport PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/iem/comport/comport PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 comport_install:
-	make -C $(externals_src)/iem/comport/comport \
+	+$(MAKE) -C $(externals_src)/iem/comport/comport \
 		DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 comport_clean:
-	make -C $(externals_src)/iem/comport/comport clean
+	+$(MAKE) -C $(externals_src)/iem/comport/comport clean
 
 
 #------------------------------------------------------------------------------#
@@ -436,13 +436,13 @@ creb_clean:
 #------------------------------------------------------------------------------#
 # CXC
 cxc:
-	make -C $(externals_src)/cxc PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/cxc PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 cxc_install:
-	make -C $(externals_src)/cxc DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/cxc DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 cxc_clean:
-	make -C $(externals_src)/cxc clean
+	+$(MAKE) -C $(externals_src)/cxc clean
 
 
 #------------------------------------------------------------------------------#
@@ -451,16 +451,16 @@ cxc_clean:
 # AG: this external provides no sane way to pass custom CFLAGS, so we abuse
 # WARN_CFLAGS for that purpose.
 cyclone:
-	make -C $(externals_src)/miXed/cyclone -f Makefile.libdir \
+	+$(MAKE) -C $(externals_src)/miXed/cyclone -f Makefile.libdir \
 		PD_PATH=$(pd_src) PD_INCLUDE=$(DESTDIR)$(includedir) WARN_CFLAGS="-Wall -W -Wstrict-prototypes -Wno-unused -Wno-parentheses -Wno-switch $(CFLAGS_ADD)"
 
 cyclone_install:
-	make -C $(externals_src)/miXed/cyclone -f Makefile.libdir \
+	+$(MAKE) -C $(externals_src)/miXed/cyclone -f Makefile.libdir \
 		DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" \
 		install
 
 cyclone_clean:
-	make -C $(externals_src)/miXed/cyclone -f Makefile.libdir \
+	+$(MAKE) -C $(externals_src)/miXed/cyclone -f Makefile.libdir \
 		clean
 
 #------------------------------------------------------------------------------#
@@ -472,50 +472,50 @@ ifneq ($(OS_NAME),darwin)
 		./configure --with-python=python2 && make
 endif
 endif
-	make -C $(externals_src)/disis PD_PATH=$(pd_src) pdbinpath=$(pd_src)/src CFLAGS="$(CFLAGS_ADD)"
+	+$(MAKE) -C $(externals_src)/disis PD_PATH=$(pd_src) pdbinpath=$(pd_src)/src CFLAGS="$(CFLAGS_ADD)"
 
 disis_install:
-	make -C $(externals_src)/disis \
+	+$(MAKE) -C $(externals_src)/disis \
 		DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" \
 		install
 
 disis_clean:
 ifneq ($(OS_NAME),windows)
 ifneq ($(OS_NAME),darwin)
-	make -C $(externals_src)/disis/cwiid clean
+	+$(MAKE) -C $(externals_src)/disis/cwiid clean
 endif
 endif
-	make -C $(externals_src)/disis clean
+	+$(MAKE) -C $(externals_src)/disis clean
 
 #------------------------------------------------------------------------------#
 # EKEXT
 ekext:
-	make -C $(externals_src)/ekext PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/ekext PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 ekext_install:
-	make -C $(externals_src)/ekext DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/ekext DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 ekext_clean:
-	make -C $(externals_src)/ekext clean
+	+$(MAKE) -C $(externals_src)/ekext clean
 
 
 #------------------------------------------------------------------------------#
 # EXT13
 ext13:
-	make -C $(externals_src)/ext13 PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/ext13 PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 ext13_install:
-	make -C $(externals_src)/ext13 DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/ext13 DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 ext13_clean:
-	make -C $(externals_src)/ext13 clean
+	+$(MAKE) -C $(externals_src)/ext13 clean
 
 #------------------------------------------------------------------------------#
 # FFTEASE
 FFTEASE_NAME=fftease
 
 fftease:
-	make -C $(externals_src)/$(FFTEASE_NAME) PD_PATH=$(pd_src) CFLAGS="$(CFLAGS_ADD)"
+	+$(MAKE) -C $(externals_src)/$(FFTEASE_NAME) PD_PATH=$(pd_src) CFLAGS="$(CFLAGS_ADD)"
 
 fftease_install:
 	#make -C $(externals_src)/$(FFTEASE_NAME) DESTDIR="$(DESTDIR)" \
@@ -537,7 +537,7 @@ fftease_install:
 		$(DESTDIR)$(objectsdir)/$(FFTEASE_NAME)
 
 fftease_clean:
-	make -C $(externals_src)/$(FFTEASE_NAME) clean
+	+$(MAKE) -C $(externals_src)/$(FFTEASE_NAME) clean
 
 #------------------------------------------------------------------------------#
 # FLATGUI
@@ -546,16 +546,16 @@ fftease_clean:
 # external directory for compatibility
 #
 flatgui:
-	make -C $(externals_src)/footils/knob CFLAGS="$(CFLAGS)" \
+	+$(MAKE) -C $(externals_src)/footils/knob CFLAGS="$(CFLAGS)" \
 		PD_PATH=$(pd_src) pdbinpath=$(pd_src)/src \
 		PD_INCLUDE=$(pd_src)/src
 
 flatgui_install:
-	make -C $(externals_src)/footils/knob STRIP="$(STRIP)" \
+	+$(MAKE) -C $(externals_src)/footils/knob STRIP="$(STRIP)" \
 		DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 flatgui_clean:
-	make -C $(externals_src)/footils/knob clean
+	+$(MAKE) -C $(externals_src)/footils/knob clean
 
 #------------------------------------------------------------------------------#
 # FLEXT and FLEXT externals
@@ -634,26 +634,26 @@ flib_clean:
 # FLUID~
 
 fluid:
-	make -C $(externals_src)/fluid~ PD_PATH=$(pd_src) \
+	+$(MAKE) -C $(externals_src)/fluid~ PD_PATH=$(pd_src) \
 		pdbinpath=$(pd_src)/src CFLAGS="$(CFLAGS_ADD)"
 
 fluid_install:
-	make -C $(externals_src)/fluid~ DESTDIR="$(DESTDIR)" \
+	+$(MAKE) -C $(externals_src)/fluid~ DESTDIR="$(DESTDIR)" \
 		objectsdir="$(objectsdir)" install
 
 fluid_clean:
-	make -C $(externals_src)/fluid~ clean
+	+$(MAKE) -C $(externals_src)/fluid~ clean
 
 #------------------------------------------------------------------------------#
 # FREEVERB
 freeverb:
-	make -C $(externals_src)/freeverb~ PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/freeverb~ PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 freeverb_install:
-	make -C $(externals_src)/freeverb~ DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/freeverb~ DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 freeverb_clean:
-	make -C $(externals_src)/freeverb~ clean
+	+$(MAKE) -C $(externals_src)/freeverb~ clean
 
 
 #------------------------------------------------------------------------------
@@ -677,7 +677,7 @@ $(gem_src)/Gem.dll: $(gem_src)/configure
 		--prefix=$(prefix) \
 		--libdir=$(objectsdir) \
 		--with-pd=$(DESTDIR)
-	$(MAKE) $(GEM_MAKEFLAGS) -C $(gem_src)
+	+$(MAKE) $(GEM_MAKEFLAGS) -C $(gem_src)
 
 $(gem_src)/Gem.pd_linux: $(gem_src)/configure
 	test -s $(gem_src)/Gem.pd_linux || \
@@ -687,7 +687,7 @@ $(gem_src)/Gem.pd_linux: $(gem_src)/configure
 			--with-video=plugins \
 			--with-film=plugins \
 			--with-pd=$(pd_src)
-	$(MAKE) $(GEM_MAKEFLAGS) -C $(gem_src)
+	+$(MAKE) $(GEM_MAKEFLAGS) -C $(gem_src)
 
 $(gem_src)/Gem.pd_darwin: $(gem_src)/configure
 	cd $(gem_src) && ./configure \
@@ -701,16 +701,16 @@ $(gem_src)/Gem.pd_darwin: $(gem_src)/configure
 		--with-video=plugins \
 		--with-film=plugins \
 		--with-pd=$(pd_src)
-	$(MAKE) $(GEM_MAKEFLAGS) -C $(gem_src)
+	+$(MAKE) $(GEM_MAKEFLAGS) -C $(gem_src)
 
 gem: $(gem_src)/Gem.$(EXTENSION)
 
 gem_install: gem
-	$(MAKE) -C $(gem_src) DESTDIR=$(DESTDIR) prefix=$(prefix) \
+	+$(MAKE) -C $(gem_src) DESTDIR=$(DESTDIR) prefix=$(prefix) \
 		libdir=$(objectsdir) pkglibdir=$(objectsdir)/Gem install
 
 gem_clean:
-	-$(MAKE) -C $(gem_src) clean
+	+-$(MAKE) -C $(gem_src) clean
 
 
 #------------------------------------------------------------------------------#
@@ -754,27 +754,27 @@ gem2pdp_clean:
 #------------------------------------------------------------------------------#
 # GGEE
 ggee:
-	make -C $(externals_src)/ggee PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/ggee PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 ggee_install:
-	make -C $(externals_src)/ggee DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/ggee DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 	cp $(externals_src)/ggee/gui/logo100.gif $(DESTDIR)/$(objectsdir)/ggee
 	cp $(externals_src)/ggee/gui/empty_image.png $(DESTDIR)/$(objectsdir)/ggee
 
 ggee_clean:
-	make -C $(externals_src)/ggee clean
+	+$(MAKE) -C $(externals_src)/ggee clean
 
 
 #------------------------------------------------------------------------------#
 # HCS
 hcs:
-	make -C $(externals_src)/hcs PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/hcs PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 hcs_install:
-	make -C $(externals_src)/hcs DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/hcs DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 hcs_clean:
-	make -C $(externals_src)/hcs clean
+	+$(MAKE) -C $(externals_src)/hcs clean
 
 
 #------------------------------------------------------------------------------#
@@ -1139,13 +1139,13 @@ jasch_lib_clean:
 #------------------------------------------------------------------------------#
 # LOADERS-LIBDIR
 loaders-libdir:
-	make -C $(externals_src)/loaders/libdir PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/loaders/libdir PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 loaders-libdir_install:
-	make -C $(externals_src)/loaders/libdir DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/loaders/libdir DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 loaders-libdir_clean:
-	make -C $(externals_src)/loaders/libdir clean
+	+$(MAKE) -C $(externals_src)/loaders/libdir clean
 
 #------------------------------------------------------------------------------#
 # LYON
@@ -1155,7 +1155,7 @@ LYON_SRC=lyonpotpourri
 LYON_DEST=lyonpotpourri
 
 lyonpotpourri:
-	make -C $(externals_src)/$(LYON_SRC) PD_PATH=$(pd_src) CFLAGS="$(CFLAGS_ADD)"
+	+$(MAKE) -C $(externals_src)/$(LYON_SRC) PD_PATH=$(pd_src) CFLAGS="$(CFLAGS_ADD)"
 
 lyonpotpourri_install:
 	#make -C $(externals_src)/$(LYON_SRC) DESTDIR="$(DESTDIR)" \
@@ -1191,52 +1191,52 @@ endif
 		$(DESTDIR)$(objectsdir)/$(LYON_DEST)
 
 lyonpotpourri_clean:
-	make -C $(externals_src)/$(LYON_SRC) clean
+	+$(MAKE) -C $(externals_src)/$(LYON_SRC) clean
 
 #------------------------------------------------------------------------------#
 # MAPPING
 mapping:
-	make -C $(externals_src)/mapping PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/mapping PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 mapping_install:
-	make -C $(externals_src)/mapping DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/mapping DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 mapping_clean:
-	make -C $(externals_src)/mapping clean
+	+$(MAKE) -C $(externals_src)/mapping clean
 
 #------------------------------------------------------------------------------#
 # MARKEX
 markex:
-	make -C $(externals_src)/markex PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/markex PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 markex_install:
-	make -C $(externals_src)/markex DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/markex DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 markex_clean:
-	make -C $(externals_src)/markex clean
+	+$(MAKE) -C $(externals_src)/markex clean
 
 #------------------------------------------------------------------------------#
 # MAXLIB
 maxlib:
-	make -C $(externals_src)/maxlib PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/maxlib PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 maxlib_install:
-	make -C $(externals_src)/maxlib DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/maxlib DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 maxlib_clean:
-	make -C $(externals_src)/maxlib clean
+	+$(MAKE) -C $(externals_src)/maxlib clean
 
 
 #------------------------------------------------------------------------------#
 # MJLIB
 mjlib:
-	make -C $(externals_src)/mjlib PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/mjlib PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 mjlib_install:
-	make -C $(externals_src)/mjlib DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/mjlib DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 mjlib_clean:
-	make -C $(externals_src)/mjlib clean
+	+$(MAKE) -C $(externals_src)/mjlib clean
 
 
 
@@ -1300,26 +1300,26 @@ moocow_clean:
 #------------------------------------------------------------------------------#
 # MOONLIB
 moonlib:
-	make -C $(externals_src)/moonlib PD_PATH=$(pd_src) CFLAGS="$(CFLAGS) -fno-strict-aliasing"
+	+$(MAKE) -C $(externals_src)/moonlib PD_PATH=$(pd_src) CFLAGS="$(CFLAGS) -fno-strict-aliasing"
 
 moonlib_install:
-	make -C $(externals_src)/moonlib DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/moonlib DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 moonlib_clean:
-	make -C $(externals_src)/moonlib clean
+	+$(MAKE) -C $(externals_src)/moonlib clean
 
 
 
 #------------------------------------------------------------------------------#
 # MOTEX
 motex:
-	make -C $(externals_src)/motex PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/motex PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 motex_install:
-	make -C $(externals_src)/motex DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/motex DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 motex_clean:
-	make -C $(externals_src)/motex clean
+	+$(MAKE) -C $(externals_src)/motex clean
 
 
 
@@ -1402,25 +1402,25 @@ oscx_clean:
 #------------------------------------------------------------------------------#
 # PAN
 pan:
-	make -C $(externals_src)/pan PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/pan PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 pan_install:
-	make -C $(externals_src)/pan DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/pan DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 pan_clean:
-	make -C $(externals_src)/pan clean
+	+$(MAKE) -C $(externals_src)/pan clean
 
 
 #------------------------------------------------------------------------------#
 # PDDP
 pddp:
-	make -C $(externals_src)/pddp PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/pddp PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 pddp_install:
-	make -C $(externals_src)/pddp DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/pddp DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 pddp_clean:
-	make -C $(externals_src)/pddp clean
+	+$(MAKE) -C $(externals_src)/pddp clean
 
 
 #------------------------------------------------------------------------------#
@@ -1430,25 +1430,25 @@ LUA_CFLAGS = $(shell (pkg-config --cflags lua5.3 || pkg-config --cflags lua5.2 |
 LUA_LIBS = $(shell (pkg-config --libs lua5.3 || pkg-config --libs lua5.2 || pkg-config --libs lua) 2> /dev/null)
 
 pdlua:
-	make -C $(externals_src)/pd-lua LUA_CFLAGS="$(LUA_CFLAGS)" LUA_LIBS="$(LUA_LIBS)" PD_PATH="$(pd_src)" PD_LIB="$(pd_src)/src" CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/pd-lua LUA_CFLAGS="$(LUA_CFLAGS)" LUA_LIBS="$(LUA_LIBS)" PD_PATH="$(pd_src)" PD_LIB="$(pd_src)/src" CFLAGS="$(CFLAGS)"
 
 pdlua_install:
-	make -C $(externals_src)/pd-lua DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/pd-lua DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 pdlua_clean:
-	make -C $(externals_src)/pd-lua clean
+	+$(MAKE) -C $(externals_src)/pd-lua clean
 
 
 #------------------------------------------------------------------------------#
 # PDOGG
 pdogg:
-	make -C $(externals_src)/pdogg PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/pdogg PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 pdogg_install:
-	make -C $(externals_src)/pdogg DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/pdogg DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 pdogg_clean:
-	make -C $(externals_src)/pdogg clean
+	+$(MAKE) -C $(externals_src)/pdogg clean
 
 
 
@@ -1508,7 +1508,7 @@ pdp_clean:
 PDP_OPENGL_NAME=3dp
 PDP_OPENGL_BINARY := $(externals_src)/pdp/opengl/pdp_opengl.$(EXTENSION)
 $(PDP_OPENGL_BINARY): $(externals_src)/pdp/Makefile.config
-	make -C $(externals_src)/pdp/opengl
+	+$(MAKE) -C $(externals_src)/pdp/opengl
 
 pdp_opengl: $(PDP_OPENGL_BINARY)
 	echo $(PDP_OPENGL_BINARY)
@@ -1542,7 +1542,7 @@ ifeq ($(OS_NAME),darwin)
 endif
 
 pdp_opengl_clean:
-	make -C $(externals_src)/pdp/opengl clean
+	+$(MAKE) -C $(externals_src)/pdp/opengl clean
 	-rm -f -- $(PDP_OPENGL_BINARY)
 	-rm -f -- $(externals_src)/pdp_opengl/*.bak
 	-rm -f -- $(externals_src)/pdp_opengl/*.*~
@@ -1602,25 +1602,25 @@ pidip_clean:
 #------------------------------------------------------------------------------#
 # PLUGIN
 plugin:
-	make -C $(externals_src)/plugin~ PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/plugin~ PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 plugin_install:
-	make -C $(externals_src)/plugin~ DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/plugin~ DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 plugin_clean:
-	make -C $(externals_src)/plugin~ clean
+	+$(MAKE) -C $(externals_src)/plugin~ clean
 
 
 #------------------------------------------------------------------------------#
 # PMPD
 pmpd:
-	make -C $(externals_src)/pmpd PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/pmpd PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 pmpd_install:
-	make -C $(externals_src)/pmpd DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/pmpd DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 pmpd_clean:
-	make -C $(externals_src)/pmpd clean
+	+$(MAKE) -C $(externals_src)/pmpd clean
 
 
 #------------------------------------------------------------------------------#
@@ -1667,7 +1667,7 @@ rjlib_clean:
 rtcmix:
 	cd $(externals_src)/rtcmix-in-pd/RTcmix-pd-4.0.1.6 \
 		&& ./configure && make
-	make -C $(externals_src)/rtcmix-in-pd \
+	+$(MAKE) -C $(externals_src)/rtcmix-in-pd \
 		PD_PATH=$(pd_src) \
 		CFLAGS="$(CFLAGS)" \
 		LINUXINCLUDE=-I$(pd_src)/src
@@ -1684,32 +1684,32 @@ rtcmix_install:
 		$(DESTDIR)/$(objectsdir)/rtcmix
 
 rtcmix_clean:
-	make -C $(externals_src)/rtcmix-in-pd clean
-	make -C $(externals_src)/rtcmix-in-pd/RTcmix*
+	+$(MAKE) -C $(externals_src)/rtcmix-in-pd clean
+	+$(MAKE) -C $(externals_src)/rtcmix-in-pd/RTcmix*
 
 #------------------------------------------------------------------------------#
 # SIGPACK
 sigpack:
-	make -C $(externals_src)/sigpack PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/sigpack PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 sigpack_install:
-	make -C $(externals_src)/sigpack DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/sigpack DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 sigpack_clean:
-	make -C $(externals_src)/sigpack clean
+	+$(MAKE) -C $(externals_src)/sigpack clean
 
 
 
 #------------------------------------------------------------------------------#
 # SMLIB
 smlib:
-	make -C $(externals_src)/smlib PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/smlib PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 smlib_install:
-	make -C $(externals_src)/smlib DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/smlib DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 smlib_clean:
-	make -C $(externals_src)/smlib clean
+	+$(MAKE) -C $(externals_src)/smlib clean
 
 
 #------------------------------------------------------------------------------#
@@ -1732,7 +1732,7 @@ tclpd_install: tclpd
 #		$(DESTDIR)$(examplesdir)/$(TCLPD_NAME)
 
 tclpd_clean:
-	make -C $(externals_src)/tclpd clean
+	+$(MAKE) -C $(externals_src)/tclpd clean
 	-rm -f -- $(TCLPD_LIB)
 	-rm -f -- $(externals_src)/tclpd/*.bak
 	-rm -f -- $(externals_src)/tclpd/*.*~
@@ -1741,14 +1741,14 @@ tclpd_clean:
 #------------------------------------------------------------------------------#
 # TKWIDGETS
 tkwidgets:
-	make -C $(externals_src)/tkwidgets PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/tkwidgets PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 tkwidgets_install:
-	make -C $(externals_src)/tkwidgets \
+	+$(MAKE) -C $(externals_src)/tkwidgets \
 		DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 tkwidgets_clean:
-	make -C $(externals_src)/tkwidgets clean
+	+$(MAKE) -C $(externals_src)/tkwidgets clean
 
 #------------------------------------------------------------------------------#
 # TOF
@@ -1807,51 +1807,51 @@ toxy_clean:
 #------------------------------------------------------------------------------#
 # UNAUTHORIZED
 unauthorized:
-	make -C $(externals_src)/unauthorized CFLAGS="$(CFLAGS)" \
+	+$(MAKE) -C $(externals_src)/unauthorized CFLAGS="$(CFLAGS)" \
 		PD_PATH=$(pd_src) PD_INCLUDE=$(pd_src)/src
 
 unauthorized_install:
-	make -C $(externals_src)/unauthorized \
+	+$(MAKE) -C $(externals_src)/unauthorized \
 		DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 unauthorized_clean:
-	make -C $(externals_src)/unauthorized clean
+	+$(MAKE) -C $(externals_src)/unauthorized clean
 
 
 #------------------------------------------------------------------------------#
 # VBAP
 vbap:
-	make -C $(externals_src)/vbap PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/vbap PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 vbap_install:
-	make -C $(externals_src)/vbap DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/vbap DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 vbap_clean:
-	make -C $(externals_src)/vbap clean
+	+$(MAKE) -C $(externals_src)/vbap clean
 
 
 #------------------------------------------------------------------------------#
 # VANILLA
 vanilla:
-	make -C $(externals_src)/vanilla PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/vanilla PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 vanilla_install:
-	make -C $(externals_src)/vanilla DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/vanilla DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 vanilla_clean:
-	make -C $(externals_src)/vanilla clean
+	+$(MAKE) -C $(externals_src)/vanilla clean
 
 
 #------------------------------------------------------------------------------#
 # WINDOWING
 windowing:
-	make -C $(externals_src)/windowing PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/windowing PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 windowing_install:
-	make -C $(externals_src)/windowing DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/windowing DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 windowing_clean:
-	make -C $(externals_src)/windowing clean
+	+$(MAKE) -C $(externals_src)/windowing clean
 
 
 
@@ -2334,13 +2334,13 @@ iemxmlrpc_clean:
 #------------------------------------------------------------------------------#
 # EARPLUG
 earplug:
-	make -C $(externals_src)/earplug~ PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
+	+$(MAKE) -C $(externals_src)/earplug~ PD_PATH=$(pd_src) CFLAGS="$(CFLAGS)"
 
 earplug_install:
-	make -C $(externals_src)/earplug~ DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
+	+$(MAKE) -C $(externals_src)/earplug~ DESTDIR="$(DESTDIR)" objectsdir="$(objectsdir)" install
 
 earplug_clean:
-	make -C $(externals_src)/earplug~ clean
+	+$(MAKE) -C $(externals_src)/earplug~ clean
 
 
 
@@ -2360,7 +2360,7 @@ etags:
 	etags --append --language=none --regex="/proc[ \t]+\([^ \t]+\)/\1/" \
 		$(externals_src)/unauthorized/*/*.tk
 	find /usr/include -type f -name \*.h -exec etags -a '{}' \;
-	make etags_`uname -s`
+	+$(MAKE) etags_`uname -s`
 
 etags_Darwin:
 	etags -a $(externals_src)/hcs/hid/HID\ Utilities\ Source/*.[ch]
diff --git a/externals/miXed/Makefile b/externals/miXed/Makefile
index 9cd39ec8..340d02c0 100644
--- a/externals/miXed/Makefile
+++ b/externals/miXed/Makefile
@@ -1,12 +1,12 @@
 include Makefile.dirs
 
 all:
-	@for i in $(MIXED_DIRS) ; \
+	@+for i in $(MIXED_DIRS) ; \
 		do ( if [ -d $$i ] ; then cd $$i; $(MAKE) ; fi ) ; done
 	@if [ -d doc/src ] ; then cd doc/src ; $(MAKE) ; fi
 
 clean cleanall:
-	@for i in $(MIXED_DIRS) ; \
+	@+for i in $(MIXED_DIRS) ; \
 		do ( if [ -d $$i ] ; then cd $$i; $(MAKE) $@ ; fi ) ; done
 	rm -f *.gz
 
@@ -19,7 +19,7 @@ ALLSRC_ROOTFILES = LICENSE.txt Makefile.common Makefile Makefile.dirs \
 	dumpsetups
 
 snap release:
-	@for i in $(RELEASE_DIRS) ; \
+	@+for i in $(RELEASE_DIRS) ; \
 		do ( if [ -d $$i ] ; then cd $$i; $(MAKE) $@ ; fi ) ; done
 
 rootsnap:
diff --git a/externals/miXed/Makefile.common b/externals/miXed/Makefile.common
index 17dbf314..e720c95a 100644
--- a/externals/miXed/Makefile.common
+++ b/externals/miXed/Makefile.common
@@ -215,11 +215,11 @@ $(BIN_DIR)/%~.$(X_SUFFIX): $(AX_DIR)%.c $(OBJECTS)
 $(BIN_DIR)/%.$(X_SUFFIX): $(CX_DIR)%.c $(OBJECTS)
 	$(CC) -o $@ $(CFLAGS) $(LFLAGS) $(OBJECTS) $<
 
-SUBDIRS = @for i in $(MIXED_DIRS) and_in_case_it_is_null ; \
+SUBDIRS = @+for i in $(MIXED_DIRS) and_in_case_it_is_null ; \
 		do ( if [ -d $$i ] ; then \
 			cd $$i; $(MAKE) $@ ; fi ) ; done
 
-SUBDIRS_DEFAULT = @for i in $(MIXED_DIRS) and_in_case_it_is_null ; \
+SUBDIRS_DEFAULT = @+for i in $(MIXED_DIRS) and_in_case_it_is_null ; \
 		do ( if [ -d $$i ] ; then \
 			cd $$i; $(MAKE) ; fi ) ; done
 
